{% set version = "0.2.0" %}
{% set number = 2 %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
# Prioritize over GPU builds
{% set number = number + 200 %}
{% endif %}

# {{ PYTHON }} is not resolved properly in multi-output recipes...
{% set PYTHON = "python" %}
{% set PYTHON = "$PREFIX/bin/python" %}  # [linux]
{% set PYTHON = "%PREFIX%\\python" %}  # [win]

package:
  name: nvmath  # dummy
  version: {{ version }}

source:
  - url: https://github.com/NVIDIA/nvmath-python/archive/refs/tags/v{{ ".".join(version.split(".")[:3]) }}.tar.gz
    sha256: 155b60e6dbacfea617aa9a2e92d262062916ccc2e3b51af199d4c1e2d9ef6555

build:
  number: {{ number }}
  skip: true  # [(py < 39) or osx or ppc64le]

requirements:
  host:
    - python

outputs:

  - name: nvmath-python
    version: {{ version }}
    build:
      number: {{ number }}
      string: cuda{{ cuda_major }}_py{{ py }}h{{ PKG_HASH }}_{{ number }}  # [cuda_compiler_version != "None"]
      string: core_py{{ py }}h{{ PKG_HASH }}_{{ number }}  # [cuda_compiler_version == "None"]
      skip: true  # [(py < 39) or cuda_compiler_version not in ("None", "11.8", "12.0")]
      script:
        # do nothing for CUDA 11, as CUDA_PATH is set in the CI images
        - export CUDA_PATH=$BUILD_PREFIX/targets/x86_64-linux/   # [(cuda_compiler_version or "").startswith("12") and linux64]
        - export CUDA_PATH=$BUILD_PREFIX/targets/sbsa-linux/     # [(cuda_compiler_version or "").startswith("12") and aarch64]
        - set CUDA_PATH=%BUILD_PREFIX%\Library                   # [(cuda_compiler_version or "").startswith("12") and win64]
        - export CUDA_PATH=$PREFIX/targets/x86_64-linux/         # [cuda_compiler_version == "None" and linux64]
        - export CUDA_PATH=$PREFIX/targets/sbsa-linux/           # [cuda_compiler_version == "None" and aarch64]
        - set CUDA_PATH=%PREFIX%\Library                         # [cuda_compiler_version == "None" and win64]
        - >-
          {{ PYTHON }} -m pip install --no-deps --no-build-isolation -v .
      ignore_run_exports_from:
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
        - cuda-cudart-dev         # [cuda_compiler_version == "None"]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
        - {{ stdlib('c') }}
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - python                                 # [build_platform != target_platform]
        - cython <3                              # [build_platform != target_platform]
      host:
        - python
        - pip
        - cython <3
        # We use headers from CUDA 12 for simplicity, but they can come from any version.
        # On conda-forge using the CUDA 12 packages is more lightweight.
        - cuda-version 12.*                      # [cuda_compiler_version == "None"]
        - cuda-cudart-dev                        # [cuda_compiler_version == "None"]
        - cuda-crt                               # [cuda_compiler_version == "None"]
        - cuda-version {{ cuda_major }}.*        # [cuda_compiler_version != "None"]
      run:
        - python
        - numpy >=1.23,<2  # TODO: relax me in the next release
        - pywin32                         # [win64]
        - cupy                            # [cuda_compiler_version != "None"]  # TODO: remove me in the next release
        - cupy-core                       # [cuda_compiler_version == "None"]  # TODO: remove me in the next release
        - libcublas                       # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver                     # [(cuda_compiler_version or "").startswith("12")]
        - libcusparse                     # [(cuda_compiler_version or "").startswith("12")]
        - libcufft                        # [(cuda_compiler_version or "").startswith("12")]
        - libcurand                       # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version >=12.0.*,<13.0.a0  # [(cuda_compiler_version or "").startswith("12")]
        - cudatoolkit                     # [(cuda_compiler_version or "").startswith("11")]
        - cuda-version >=11.0.*,<12.0.a0  # [(cuda_compiler_version or "").startswith("11")]
      run_constrained:   # [cuda_compiler_version == "None"]
        - cuda-version >=11.0.*,<13.a0    # [cuda_compiler_version == "None"]
    test:
      imports:
        - nvmath

  - name: nvmath-python-dx
    version: {{ version }}
    build:
      number: {{ number }}
      # dx support currently requires CUDA 12
      skip: true  # [(py < 39 or py > 311) or not (linux64 or aarch64) or not (cuda_compiler_version or "").startswith("12")]
      script:
        - echo "building the [dx] meta package..."
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage("nvmath-python", exact=True) }}
        - cupy  # TODO: remove me in the next release
        - numba 0.59.*
        - cuda-python
        - cuda-nvcc
        - cuda-nvrtc
        - cuda-cudart-dev
        - cuda-cccl
        - mathdx 24.04.0.*
        - cuda-version >=12.0.*,<12.4.a0
    test:
      imports:
        - nvmath

about:
  home: https://developer.nvidia.com/nvmath-python
  license: Apache-2.0
  license_url: https://docs.nvidia.com/cuda/nvmath-python/latest/license.html
  license_file: LICENSE
  summary: "nvmath-python: NVIDIA Math Libraries for the Python Ecosystem"
  description: |
    nvmath-python aims to bring the power and performance of the NVIDIA math libraries
    to the Python ecosystem with intuitive, pythonic APIs. The ultimate goal is to
    provide users full access to all of the available library features in a variety
    of execution spaces.
  doc_url: https://docs.nvidia.com/cuda/nvmath-python
  dev_url: https://github.com/NVIDIA/nvmath-python

extra:
  recipe-maintainers:
    - conda-forge/cuda
    - carterbox
    - leofang
